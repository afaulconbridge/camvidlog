{
	"name": "CamVidLog",
	"image": "mcr.microsoft.com/devcontainers/python:1-3.11-bookworm",
	// "dockerComposeFile": "docker-compose.yml",
	// "service": "devcontainer",
	// "workspaceFolder": "/workspaces/${localWorkspaceFolderBasename}",
	// Features to add to the dev container. More info: https://containers.dev/features.
	"features": {
		"ghcr.io/devcontainers/features/nvidia-cuda:1": {
			"cudaVersion": "12.2",
			"installToolkit": true
		},
		"ghcr.io/iterative/features/nvtop:1": {},
		"ghcr.io/devcontainers-contrib/features/hatch:2": {},
		"ghcr.io/devcontainers-contrib/features/pre-commit:2": {}
	},
	"customizations": {
		"vscode": {
			"extensions": [
				"charliermarsh.ruff",
				"codezombiech.gitignore",
				"eamodio.gitlens",
				"exiasr.hadolint",
				"kevinrose.vsc-python-indent",
				"mosapride.zenkaku",
				"ms-azuretools.vscode-docker",
				"ms-python.python",
				"njpwerner.autodocstring",
				"oderwat.indent-rainbow",
				"pkief.material-icon-theme",
				"shardulm94.trailing-spaces",
				"usernamehw.errorlens",
				"yzhang.markdown-all-in-one",
				"tamasfe.even-better-toml"
			],
			"settings": {
				"python.defaultInterpreterPath": "/opt/rye/shims/python",
				"[python]": {
					"editor.defaultFormatter": "charliermarsh.ruff",
					"editor.codeActionsOnSave": {
						"source.fixAll.ruff": "explicit",
						"source.organizeImports.ruff": "explicit"
					},
					"editor.formatOnSave": true
				},
				"files.insertFinalNewline": true,
				"files.trimTrailingWhitespace": true,
				"terminal.integrated.defaultProfile.linux": "zsh",
				"terminal.integrated.profiles.linux": {
					"zsh": {
						"path": "/bin/zsh"
					}
				}
			}
		}
	},
	// Require GPU access on the host
	"hostRequirements": {
		"gpu": "optional"
	},
	// An array of Docker CLI arguments that should be used when running the container.
	"runArgs": [
		"--gpus=all",
		"--shm-size=1073741824", //1gb
		"--privileged" // required to mount CIFS/SMB from within container
	],
	"containerEnv": {
		"NVIDIA_DRIVER_CAPABILITIES": "all"
	},
	// Use 'postCreateCommand' to run commands after the container is created.
	"postCreateCommand": ".devcontainer/post-create.sh",
	"postStartCommand": ".devcontainer/post-start.sh"
}
